mixin boroughToggleStyles(boroughData, boroughName, user)  
  -// parent
  .borough
    -//new div to center content 
    .boroughName
      if !boroughName
        each featureGroup, featureGroupName in boroughData
          -// the parent
          .featureGroup.layersInArea
			   
            -// the toggle
            -//i.toggleVisibility.fa-minus-square.fas.compress-expand-icon
            -//label #{featureGroupName}
            -// children
            -//.hiddenContent
            each style in featureGroup
              +styleToggle(style)   
      if boroughName 
        -// toggle
        i.toggleVisibility.fa-plus-square.fas.compress-expand-icon
        -// .areaList
        -// label #{boroughName}
        b #{boroughName}
        -// child
        .hiddenContent(name=`${boroughName}-layers`)
          each featureGroup, featureGroupName in boroughData
            -// the parent
            -// new div to keep toggle action
            .featureGroupName
              .featureGroup.layersInArea
                -// the toggle
                -// i.toggleVisibility.fa-minus-square.fas.compress-expand-icon
                -// label #{featureGroupName}
                -// children
                -//.hiddenContent
                each style in featureGroup
                  +styleToggle(style, user)

mixin styleToggle(style, user)
  .layer
    input(type='radio' data-_id=style._id name='beforeMapRadio' data-url=style['style source url'] data-target='beforeMap' title='Render this style on the left?' data-borough=style.borough data-featureGroup=style['feature group']).fetchStyle
    input(type='radio' data-_id=style._id name='afterMapRadio' data-url=style['style source url'] data-target='afterMap' title='Render this style on the right?' data-borough=style.borough data-featureGroup=style['feature group']).fetchStyle
    if user
      i.editStyle.fa-pencil-alt.fas.compress-expand-icon(title='Edit this map?' data-_id=style._id)
      i.mapMaster.deleteStyle.fa-trash.fas.compress-expand-icon(title='Delete this map?' data-_id=style._id)
    label(for=style._id) #{style['feature group']}
    i.fa.fa-info-circle.toggleInfo(data-nodeId=style['drupal node id']).hidden
    if style['ease to point']
      i.fa.fa-crosshairs.easeToPoint(data-easeToPoint=style['ease to point'] data-bearing=style.bearing data-zoom=style.zoom)
